local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local MAX_SPEED = 1000
local MIN_SPEED = 0
local speed = 115
local isSpeedToggled = false
local previousSpeed = speed
local collisionToggle = false
local ClosestATV = nil
local Enabled = false
local atvbypass = true
local isCharacterFrozen = false
local isATVFrozen = false

local function clampSpeed(value, min, max)
    return math.max(min, math.min(max, value))
end

local function adjustSpeed(amount)
    speed = clampSpeed(speed + amount, MIN_SPEED, MAX_SPEED)
end

local function toggleSpeed()
    if isSpeedToggled then
        speed = previousSpeed
    else
        previousSpeed = speed
        speed = 28
    end
    isSpeedToggled = not isSpeedToggled
end

local function GetClosestATV()
    local closestATV, closestDistance = nil, math.huge

    for _, v in ipairs(Workspace:GetChildren()) do
        if v:FindFirstChild("Seat") and v:FindFirstChild("Plastics") then
            local distance = (v.Plastics.Position - Workspace.Ignore.LocalCharacter.Middle.Position).Magnitude
            if distance < closestDistance then
                closestATV = v
                closestDistance = distance
            end
        end
    end

    return closestATV
end

local function toggleATVCollision()
    if not ClosestATV then return end

    collisionToggle = not collisionToggle
    for _, part in ipairs(ClosestATV:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = collisionToggle
        end
    end
end

local function FlyHack()
    RunService.RenderStepped:Connect(function()
        ClosestATV = GetClosestATV()
        if Enabled and ClosestATV then
            local plastics = ClosestATV.Plastics
            plastics.Velocity = Vector3.zero

            local flip2 = ClosestATV.Frame:FindFirstChild("Flip2")
            if not flip2 then
                local newFlip = ClosestATV.Frame.Flip:Clone()
                newFlip.Name = "Flip2"
                newFlip.Enabled = true
                newFlip.Parent = ClosestATV.Frame
            else
                flip2.Enabled = true
            end

            local travel = Vector3.zero
            local cameraCFrame = Workspace.CurrentCamera.CFrame

            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                travel += cameraCFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                travel -= cameraCFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                travel += cameraCFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                travel -= cameraCFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.X) then
                travel += cameraCFrame.UpVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                travel -= cameraCFrame.UpVector
            end

            if travel.Magnitude > 0 then
                plastics.Anchored = false
                plastics.Velocity = travel.Unit * speed
            else
                plastics.Velocity = Vector3.zero
                plastics.Anchored = false
            end
        else
            local flip2 = ClosestATV and ClosestATV.Frame:FindFirstChild("Flip2")
            if flip2 then
                flip2.Enabled = false
            end
        end
    end)
end

local function toggleCharacterFreeze()
    local character = Workspace.Ignore.LocalCharacter
    if isCharacterFrozen then
        -- When unfrozen, re-enable collision for all parts of the character
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
        character.HumanoidRootPart.Anchored = false
        isCharacterFrozen = false
    else
        -- When frozen, disable collision for all parts of the character (no-clip mode)
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
        character.HumanoidRootPart.Anchored = true
        isCharacterFrozen = true
    end
end

local function toggleATVFreeze()
    if not ClosestATV then return end
    local atv = ClosestATV
    local currentPos = atv.Plastics.Position  -- Store initial position
    
    if isATVFrozen then
        atv.Plastics.Anchored = false
        isATVFrozen = false
    else
        atv.Plastics.Anchored = false
        isATVFrozen = true
        -- Listen for movement input
        RunService.RenderStepped:Connect(function()
            if isATVFrozen then
                local travel = Vector3.zero
                local cameraCFrame = Workspace.CurrentCamera.CFrame

                -- Movement input (WASD)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    travel += cameraCFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    travel -= cameraCFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    travel += cameraCFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    travel -= cameraCFrame.RightVector
                end

                -- Make the ATV move based on WASD input, while preserving its height (Y position)
                local newPos = Vector3.new(currentPos.X + travel.X, currentPos.Y, currentPos.Z + travel.Z)
                atv:SetPrimaryPartCFrame(CFrame.new(newPos))
            end
        end)
    end
end

-- Key bindings for E and K to move the ATV up and down
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.V then
        adjustSpeed(5)
    elseif input.KeyCode == Enum.KeyCode.N then
        adjustSpeed(-5)
    elseif input.KeyCode == Enum.KeyCode.Q then
        toggleSpeed()
    elseif input.KeyCode == Enum.KeyCode.Z then
        Enabled = not Enabled
    elseif input.KeyCode == Enum.KeyCode.F then
        toggleATVCollision()
        if ClosestATV then
            ClosestATV.Plastics.CanCollide = not ClosestATV.Plastics.CanCollide
        end
    elseif input.KeyCode == Enum.KeyCode.L then
        toggleCharacterFreeze()
    elseif input.KeyCode == Enum.KeyCode.E and isATVFrozen then
        -- Move the ATV up when E is pressed
        local atv = ClosestATV
        if atv then
            local currentPos = atv.Plastics.Position
            atv:SetPrimaryPartCFrame(CFrame.new(currentPos.X, currentPos.Y + 5, currentPos.Z))  -- Move up by 5 units
        end
    elseif input.KeyCode == Enum.KeyCode.K and isATVFrozen then
        -- Move the ATV down when K is pressed
        local atv = ClosestATV
        if atv then
            local currentPos = atv.Plastics.Position
            atv:SetPrimaryPartCFrame(CFrame.new(currentPos.X, currentPos.Y - 5, currentPos.Z))  -- Move down by 5 units
        end
    end
end)

RunService.RenderStepped:Connect(function()
    local character = Workspace.Ignore.LocalCharacter
    if isCharacterFrozen then
        -- When character is frozen, we still allow WASD movement but keep it in the same position
        local travel = Vector3.zero
        local cameraCFrame = Workspace.CurrentCamera.CFrame

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            travel += cameraCFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            travel -= cameraCFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            travel += cameraCFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            travel -= cameraCFrame.RightVector
        end

        if travel.Magnitude > 0 then
            -- Keep the character frozen but allow movement
            character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame + travel.Unit * speed * RunService.RenderStepped:Wait()
        end
    else
        -- If not frozen, allow regular movement using WASD
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid:Move(Vector3.new())
        end
    end
end)

FlyHack()

RunService.RenderStepped:Connect(function()
    for _, v in ipairs(Workspace:GetChildren()) do
        local frame = v:FindFirstChild("Frame")
        if frame then
            local flip = frame:FindFirstChild("Flip")
            if flip and atvbypass then
                flip.Enabled = true
                flip.RigidityEnabled = true
                flip.Responsiveness = math.huge
            end
        end
    end
end)
