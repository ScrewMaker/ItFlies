if not LPH_OBFUSCATED then
    LPH_JIT_MAX = function(...) return ... end
end

loadstring(game:HttpGet("https://raw.githubusercontent.com/ScrewMaker/yenoMarket/refs/heads/main/Ym"))()

-- Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Character References
local character = workspace.Const.Ignore.LocalCharacter
local middle = character.Middle
local bottom = character.Bottom
local top = character.Top
local prism = top:FindFirstChild("Prism1")

if not prism then
    warn("Prism1 not found in character.Top")
    return
end

-- Variables
local longNeckEnabled = false
local freecamEnabled = false
local atvFlyEnabled = false
local speed = 10
local freecamOffset = Vector3.zero
local pos = middle.CFrame
local originalPrismCFrame = prism.CFrame

-- ATV Fly Variables
local atvCar = nil
local atvDist = 50
local atvSpeed = 55
local atvUpSpeed = 15
local atvAccel = 100
local atvBuildup = 0
local atvLastDir = Vector3.new(1, 0, 0)
local speedEnabled = true  -- Speed toggle variable

-- Function to Toggle Long Neck
local function toggleLongNeck()
    longNeckEnabled = not longNeckEnabled
    if longNeckEnabled then
        prism.CFrame = originalPrismCFrame - Vector3.yAxis * 8
    else
        prism.CFrame = originalPrismCFrame
    end
end

-- Function to Toggle Freecam
local function toggleFreecam()
    freecamEnabled = not freecamEnabled
    middle.CanCollide = not freecamEnabled
    bottom.CanCollide = not freecamEnabled
    top.CanCollide = not freecamEnabled
end

-- Function to Find ATV
local function findATV()
    atvCar, atvDist = nil, 50
    for _, v in pairs(workspace:GetChildren()) do
        if v:FindFirstChild("Seat") and v:FindFirstChild("Frame") then
            local distance = (v.Frame.Position - middle.Position).Magnitude
            if distance < atvDist then
                atvCar = v
                atvDist = distance
            end
        end
    end
end

-- Function to Update ATV Fly
local function updateATVFly(delta)
    if atvFlyEnabled and atvCar and atvCar:FindFirstChild("Frame") and (atvCar.Frame.CFrame.Position - workspace.CurrentCamera.CFrame.Position).Magnitude <= 50 then
        local cameraLook = workspace.CurrentCamera.CFrame.LookVector
        cameraLook = Vector3.new(cameraLook.X, 0, cameraLook.Z)
        local direction = Vector3.zero
        direction = UserInputService:IsKeyDown(Enum.KeyCode.W) and direction + cameraLook or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.S) and direction - cameraLook or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.D) and direction + Vector3.new(-cameraLook.Z, 0, cameraLook.X) or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.A) and direction + Vector3.new(cameraLook.Z, 0, -cameraLook.X) or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.V) and direction + Vector3.yAxis or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.B) and direction - Vector3.yAxis or direction

                if direction ~= Vector3.zero then
                direction = direction.Unit
                if direction ~= Vector3.yAxis and -direction ~= Vector3.yAxis then
                    buildup = math.clamp(buildup + delta * accel, 0, speed)
                    lastdir = direction
                end
            else
                direction = lastdir
                buildup = math.clamp(buildup - delta * 150, 0, speed)
            end

        for _, v in pairs(atvCar:GetChildren()) do
            v.AssemblyLinearVelocity = _Vector3new(direction.X * buildup, direction.Y * upspeed, direction.Z * buildup)
                --v.AssemblyLinearVelocity = direction * SPEED + _Vector3new(0, 0.05, 0)
                --v.CFrame = _CFramenew(v.CFrame.Position) * CFrame.Angles(0, y+(math.pi/2), 0)
            end
        elseif not car or car and car:FindFirstChild("Frame") and (car.Frame.CFrame.p - Camera.CFrame.p).Magnitude > 50 then
            findcar()
            buildup = 0
        else
            buildup = 0
        end
    end))

-- Freecam Movement Logic
RunService.Heartbeat:Connect(function(delta)
    if freecamEnabled and middle then
        middle.CFrame = pos
        RunService.RenderStepped:Wait()
        
        if middle then
            local cameralook = workspace.CurrentCamera.CFrame.LookVector
            local direction = Vector3.zero
            direction = UserInputService:IsKeyDown(Enum.KeyCode.W) and direction + cameralook or direction
            direction = UserInputService:IsKeyDown(Enum.KeyCode.S) and direction - cameralook or direction
            direction = UserInputService:IsKeyDown(Enum.KeyCode.D) and direction + Vector3.new(-cameralook.Z, 0, cameralook.X) or direction
            direction = UserInputService:IsKeyDown(Enum.KeyCode.A) and direction + Vector3.new(cameralook.Z, 0, -cameralook.X) or direction

            if direction ~= Vector3.zero then
                direction = direction.Unit
            end

            freecamOffset = freecamOffset + (direction * delta * speed)
            middle.CFrame = pos + freecamOffset
            middle.AssemblyLinearVelocity = Vector3.zero
        end
    elseif middle then
        freecamOffset = Vector3.zero
        pos = middle.CFrame
    end
end)

-- ATV Fly Update Loop
RunService.RenderStepped:Connect(function(delta)
    if atvFlyEnabled then
        updateATVFly(delta)
    end
end)

-- Key Binds
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.L then
        toggleLongNeck()
    elseif input.KeyCode == Enum.KeyCode.F then
        toggleFreecam()
    elseif input.KeyCode == Enum.KeyCode.Z then
        atvFlyEnabled = not atvFlyEnabled
        findATV()
    elseif input.KeyCode == Enum.KeyCode.Q then
        speedEnabled = not speedEnabled
    end
end)
        
    

