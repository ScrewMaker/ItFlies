-- Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Long Neck Variables
local longNeckEnabled = false
local originalPrismCFrame = workspace.Const.Ignore.LocalCharacter.Top.Prism1.CFrame

-- ATV Fly Variables
local atvFlyEnabled = false
local atvSpeed = 55
local atvUpSpeed = 15
local atvAccel = 100
local atvCar = nil
local atvDist = 50
local atvBuildup = 0
local atvLastDir = Vector3.new(1, 0, 0)
local speedEnabled = true  -- Speed toggle variable

-- Long Neck Functionality
local function toggleLongNeck()
    longNeckEnabled = not longNeckEnabled
    if longNeckEnabled then
        workspace.Const.Ignore.LocalCharacter.Top.Prism1.CFrame = originalPrismCFrame - Vector3.yAxis * 15
    else
        workspace.Const.Ignore.LocalCharacter.Top.Prism1.CFrame = originalPrismCFrame
    end
end

-- ATV Fly Functionality
local function findATV()
    atvCar, atvDist = nil, 50
    for _, v in pairs(workspace:GetChildren()) do
        if v:FindFirstChild("Seat") and v:FindFirstChild("Frame") then
            local distance = (v.Frame.Position - workspace.Const.Ignore.LocalCharacter.Middle.Position).Magnitude
            if distance < atvDist then
                atvCar = v
                atvDist = distance
            end
        end
    end
end

local function updateATVFly(delta)
    if atvFlyEnabled and atvCar and atvCar:FindFirstChild("Frame") and (atvCar.Frame.CFrame.Position - workspace.CurrentCamera.CFrame.Position).Magnitude <= 50 then
        local cameraLook = workspace.CurrentCamera.CFrame.LookVector
        cameraLook = Vector3.new(cameraLook.X, 0, cameraLook.Z)
        local direction = Vector3.zero
        direction = UserInputService:IsKeyDown(Enum.KeyCode.W) and direction + cameraLook or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.S) and direction - cameraLook or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.D) and direction + Vector3.new(-cameraLook.Z, 0, cameraLook.X) or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.A) and direction + Vector3.new(cameraLook.Z, 0, -cameraLook.X) or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.V) and direction + Vector3.yAxis or direction
        direction = UserInputService:IsKeyDown(Enum.KeyCode.B) and direction - Vector3.yAxis or direction
        
        if direction ~= Vector3.zero then
            direction = direction.Unit
            if direction ~= Vector3.yAxis and -direction ~= Vector3.yAxis then
                atvBuildup = math.clamp(atvBuildup + delta * atvAccel, 0, speedEnabled and atvSpeed or 0) -- Speed toggle applied
                atvLastDir = direction
            end
        else
            direction = atvLastDir
            atvBuildup = math.clamp(atvBuildup - delta * 150, 0, speedEnabled and atvSpeed or 0) -- Speed toggle applied
        end

        for _, v in pairs(atvCar:GetChildren()) do
            v.AssemblyLinearVelocity = Vector3.new(direction.X * atvBuildup, direction.Y * atvUpSpeed, direction.Z * atvBuildup)
        end
    elseif not atvCar or (atvCar and atvCar:FindFirstChild("Frame") and (atvCar.Frame.CFrame.Position - workspace.CurrentCamera.CFrame.Position).Magnitude > 50) then
        findATV()
        atvBuildup = 0
    else
        atvBuildup = 0
    end
end

-- Key Bind for Long Neck
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.L then
        toggleLongNeck()
    end
end)

-- ATV Fly Toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.F then
        atvFlyEnabled = not atvFlyEnabled
        findATV()
    end
end)

-- Speed Toggle (Q Key)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.Q then
        speedEnabled = not speedEnabled
    end
end)

-- ATV Fly Update Loop
RunService.RenderStepped:Connect(function(delta)
    if atvFlyEnabled then
        updateATVFly(delta)
    end
end)
